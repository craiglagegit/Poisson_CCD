
#
#  ------------------------------------------------------------------------------
#  Author: Craig Lage, UC Davis
#  Date: Apr 18, 2022
#
#  Standalone cpp Poisson solver
#
#
# Poisson Solver configuration file

VerboseLevel = 2  # 0 - minimal output, 1 - normal, 2 - more verbose, 3 - dump almost everything

# Poisson solver constants
# These control the numerics of the Poisson solver
# They should not need to be changed unless you test for convergence

w = 1.8 			# Successive Over-Relaxation factor
ncycle = 64			# Number of SOR cycles at finest grid
iterations = 1			# Number of VCycles
#  ------------------------------------------------------------------------------
# Overall setup - these control the size and scale of the simulated volume

ScaleFactor = 1    	   	# Power of 2 that sets the grid size
# ScaleFactor = 1 means grid size is 0.625 micron, 160 grids in the z-direction
# ScaleFactor = 2 cuts grid size by a factor of 2
# ScaleFactor = 4 cuts grid size by a factor of 4, etc.
SensorThickness = 35.0         # Sensor thickness in microns
PixelSizeX = 25.0  	     	# Pixel size in microns in x 
PixelSizeY = 25.0  	     	# Pixel size in microns in y 
GridsPerPixelX = 32		# Number of grids per pixel in x at ScaleFactor = 1
GridsPerPixelY = 32		# Number of grids per pixel in y at ScaleFactor = 1
Nx = 64      			# Number of grids in x at ScaleFactor = 1 (Must be a multiple of 32)
Ny = 64      			# Number of grids in y at ScaleFactor = 1 (Must be a multiple of 32)
Nz = 64				# Number of grids in z at ScaleFactor = 1 (Must be a multiple of 32)
Nzelec = 64			# Number of grids in electron and hole arrays
NZExp = 10.0                     # Non-linear Z-axis slope at z=0
      				# A value of 1.0 makes the z-axis linear
				# A value of 10.0 gives a 10X magnification at z=0
				# A value of 10.0 is recommended.

XBCType = 1			# Set X direction boundary conditions: 0 - Free (Eperp = 0), 1 - Periodic
YBCType = 1			# Set Y direction boundary conditions: 0 - Free (Eperp = 0), 1 - Periodic
SimulationRegionLowerLeft = 12.5 12.5	  # Allows adjustment of X, Y coordinates

#  ------------------------------------------------------------------------------
# Fixed charges and oxides in the silicon

BottomOxide = 0.20               # Bottom Oxide thickness in microns
TopSurfaceDoping = -1E14      # Doping of top surface
TopDopingThickness = 2.0    # Thickness of top doping layer
BackgroundDoping = -2E12
ContactProfile = 0		# 0 = Square profile, N = N Gaussian profiles
ContactDoping = 1.0E14		# Doping in cm^-2
ContactDepth = 1.0		# Depth in microns
ContactWidth = 20.0		# Width in microns
ContactHeight = 20.0	# Height in microns

#  ------------------------------------------------------------------------------
# Voltages these should be self-explanatory

Vbb = -4.0			# Back bias
Vcontact = -2.0

#  ------------------------------------------------------------------------------
# Pixel Regions
# These allow one to set up one or more regions of regularly spaced pixels.
# Each pixel region will need its extents defined
# Within each pixel region, one can fill multiple collecting wells with arbitrary amounts of charge

NumberofPixelRegions = 1	  	  # 1
PixelRegionLowerLeft_0 = 0.0 0.0	  #
PixelRegionUpperRight_0 = 75.0 75.0	  #
NumberofContactDeltaVs_0 = 1		  #
DeltaV_0_0 = 	-1.5		  	  # 
DeltaVPixelCoords_0_0 = 37.5 37.5	  # (x,y) coords of pixel center

#  ------------------------------------------------------------------------------
#  ------------------------------------------------------------------------------
# Pixel Boundary Tests - This allows tracing the pixel boundaries and electron paths

PixelBoundaryLowerLeft = 25.0 25.0
PixelBoundaryUpperRight = 50.0 50.0
PixelBoundaryNx = 1	   	      	   # Number of pixels in postage stamp
PixelBoundaryNy = 1	   	      	   # Number of pixels in postage stamp

PixelBoundaryTestType = -1		   # 0 - Run a grid of equally spaced electrons,
		      			   # 1 - Run a random set of electrons with a Gaussian pattern
					   # 2 - Run a random set of electrons inside PixelBoundary
#PixelBoundaryStepSize = 0.2 0.2	   # Needed if PixelBoundaryTestType = 0

NumSteps = 1					 # Number of steps, each one adding NumElec electrons

NumElec = 0					 # Number of electrons to be traced between field recalculation

CalculateZ0 = 0				   # 0 - don't calculate - Use ElectronZ0
ElectronZ0Fill = 34.0       	      	   # Starting z value of electron for tracking. 100.0 is at the incident light surface.
ElectronZ0Area = 34.0       	      	   # Starting z value of electron for Area/Vertex finding. 100.0 is at the incident light surface.

LogEField = 1	 	       	      	   # 0 - don't calculate E-Field, 1 - Calculate and store E-Field
LogPixelPaths = 0			   # 0 - only the final (z~0) point is logged, 1 - Entire path is logged
PixelAreas = -1				   # -1 - Don't calculate areas, N - calculate areas every nth step
NumVertices = 32 			   # Number of vertices per side for the pixel area calculation.
	      				   # Since there are also 4 corners, there will be:
					   # (4 * NumVertices + 4) vertices in each pixel

#  ------------------------------------------------------------------------------
# Electron tracking parameters

CCDTemperature = 7.0			   # Temp in Degrees K.  Used to calculate diffusion steps.

DiffMultiplier = 2.30			   # Used to adjust the amount of diffusion.
       	 				   # A value of 2.30 gives the theoretical amount of diffusion
					   # A value of 0.0 turns off diffusion completely
EquilibrateSteps = 1			   # Number of diffusion steps each electron takes after reaching the bottom,
					   # and before beginning to log the charge.
BottomSteps = 1				   # Number of diffusion steps each electron takes while logging final charge location					   
NumDiffSteps = 1			   # A speed/accuracy trade-off. A value of 1 uses the theoretical diffusion
	       				   # step.  A higher value takes larger steps. I have done a few tests
					   # but I recommend using a value of 1 unless you test larger values.
SaturationModel = 0			   # Saturation Model 1=On, 0=Off; Experimental!


#  ------------------------------------------------------------------------------
# These control the location and naming of the output

outputfiledir = data/smallpixel
outputfilebase 	= Pixel
SaveData = 1 				# 0 - Save only Pts data, N - Save all data every Nth step
SaveElec = 1 				# 0 - Save only Pts data, N - Save Elec data every Nth step
SaveMultiGrids = 1			

#  ------------------------------------------------------------------------------
# These control the continuation if you want to save a simuation before it is complete

Continuation = 0			# Use this to continue an existing simulation and read in where you left off
	       				# 0 - No continuation
					# 1 Continue at step LastContinuationStep
LastContinuationStep = 0
